{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","robots.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","className","src","alt","CardList","robots","cardsArray","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","username","Scroll","style","overflowY","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","filterRobots","filter","robot","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.d2460c19.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n\tconst { name, email, id } = props;\n\treturn (\n\t\t<div className=\"card\">\n\t\t\t<img className=\"card-img\" src={`https://robohash.org/${id}`} alt=\"A cool robot\" />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p className=\"email-addy\">{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\t\n\tconst cardsArray = robots.map((user, i) => {\n\t\treturn (\n\t\t<Card \n\t\t key={i} \n\t\t id={robots[i].id} \n\t\t name={robots[i].name} \n\t\t email={robots[i].email} \n\t\t />\n\t\t);\n\t})\n\treturn (\n\t\t<div className=\"flex\">\n\t\t\t{ cardsArray }\n\t\t</div>\t\n\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange }) => {\n\treturn (\n\t\t<div className=\"search-box-container\">\n\t\t\t<input \n\t\t\t\tclassName=\"search-box\" \n\t\t\t\ttype=\"search\" \n\t\t\t\tplaceholder=\"search robots\" \n\t\t\t\tonChange={searchChange}\n\t\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","export const robots = [\n  {\n    id: 1,\n    name: 'Eric Cameron',\n    username: 'Bret',\n    email: 'Sincere@gmail.com'\n  },\n  {\n    id: 2,\n    name: 'Brandi Cameron',\n    username: 'Antonette',\n    email: 'Shanna@gmail.com'\n  },\n  {\n    id: 3,\n    name: 'Alexis Tracy',\n    username: 'Becca',\n    email: 'Nathan@gmail.com'\n  },\n  {\n    id: 4,\n    name: 'Ian Morrison',\n    username: 'Karianne',\n    email: 'Julianne.OConner@gmail.com'\n  },\n  {\n    id: 5,\n    name: 'Megan Tracy',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@gmail.com'\n  },\n  {\n    id: 6,\n    name: 'Raeed Alawi',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@gmail.com'\n  },\n  {\n    id: 7,\n    name: 'Brian Chapman',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@gmail.com'\n  },\n  {\n    id: 8,\n    name: 'Angie Chapman',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@gmail.com'\n  },\n  {\n    id: 9,\n    name: 'Cole Chapman',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@gmail.com'\n  },\n  {\n    id: 10,\n    name: 'Leia Chapman',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@gmail.com'\n  },\n\t{\n    id: 11,\n    name: 'Roo Tracy',\n    username: 'Roo.Roo',\n    email: 'Roo.Roo@gmail.com'\n  }\n];\n","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{overflowY: 'scroll', height: '70vh'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t)\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\t\n\tcomponentDidCatch(error, info) {\n\t\tthis.setState({ hasError: true })\n\t}\n\t\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1>Oops! I'm broken!</h1>\n\t\t}\n\t\treturn this.props.children\n\t}\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport { robots } from '../robots';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\n\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\trobots: robots,\n\t\t\tsearchfield: ''\n\t\t}\n\t}\n\t\n\tonSearchChange = (event) => {\n\t\tthis.setState({ searchfield: event.target.value })\n\t}\n\t\n\trender() {\n\t\tconst filterRobots = this.state.robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n\t\t})\n\t\treturn (\n\t\t\t<div> \n\t\t\t\t<h1>Robo<span><img src=\"https://robohash.org/Robot/?size=120x120\" alt=\"Robot mascot\"/></span>Friends</h1>\n\t\t\t\t<SearchBox searchChange={this.onSearchChange} />\n\t\t\t\t<Scroll>\n\t\t\t<ErrorBoundry>\n\t\t\t\t<CardList robots={filterRobots} />\n\t\t\t</ErrorBoundry>\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import Card from './Card';App\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}